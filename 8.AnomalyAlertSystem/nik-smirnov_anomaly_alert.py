# import
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import telegram
import pandahouse as ph
import io
import sys
import os
import warnings
warnings.filterwarnings("ignore")
from datetime import datetime, date, timedelta

from airflow.decorators import dag, task


# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—é—Ç—Å—è –≤ —Ç–∞—Å–∫–∏
default_args = {
    'owner': 'nik.smirnov',
    'depends_on_past': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
    'start_date': datetime(2023, 8, 26),
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ DAG
schedule_interval = '*/15 * * * *'

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
def check_anomaly(df, metric, a = 1.5, days = 4):
    """ –§—É–Ω–∫—Ü–∏—è check_anomaly –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞. 
    –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–≤–∞—Ä—Ç–∏–ª–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ—Ä–µ—Ç —Å—Ç–∞—Ç–∏—Ç–∏–∫—É –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—É—â–∏—Ö –¥–Ω–µ–π (–∞—Ä–≥—É–º–µ–Ω—Ç days), –∞ –∏–º–µ–Ω–Ω–æ:
    –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Ç–∞–∫–æ–π –∂–µ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∞ —Ç–∞–∫–∂–µ –∑–∞ 2 –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ 2 –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –µ–º—É.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    df - –¥–∞—Ç–∞—Ñ—Ä–µ–π–º;
    metric - –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –º–µ—Ç—Ä–∏–∫–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ df);
    a ‚àí –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —à–∏—Ä–∏–Ω—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞;
    days - —á–∏—Å–ª–æ –¥–Ω–µ–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±–µ—Ä–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫–∞–∑–∞–ª–∏ 4, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ 7-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤. –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ (–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–Ω—è–º–∏ –ø–æ—Å–ª–µ) —ç—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏–ª—å–Ω–æ –≤—ã—Ä–æ—Å–ª–∏. –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç —Ä–∞—Å—Ç–∏ –æ—Ç –Ω–µ–¥–µ–ª–∏ –∫ –Ω–µ–¥–µ–ª–µ, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–Ω—ã–º 7.
    
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 
    is_alert - boolean value, —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–º –∏–ª–∏ –Ω–µ—Ç;
    df_today - DataFrame, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ –ø—è—Ç–Ω–∞–¥–Ω–∞—Ü–∞—Ç–∏–º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º. 
    –ü–æ–º–∏–º–æ –∏–º–µ–≤—à–∏—Ö—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ª–±—Ü—ã: 
        - 'metric_values' - —Å–ø–∏—Å–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –º–µ—Ç—Ä–∏–∫–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã;
        - 'median' - –º–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ (–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º—ã–µ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è);
        - 'q25' - –∑–Ω–∞—á–µ–Ω–∏—è 1 –∫–≤–∞—Ä—Ç–∏–ª—è;
        - 'q75' - –∑–Ω–∞—á–µ–Ω–∏—è 3 –∫–≤–∞—Ä—Ç–∏–ª—è;
        - 'iqr' - –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞;
        - 'low' - –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤;
        - 'up' - –≤–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤. 
    """
    df_today = df[df['date'] == df['date'].max()]
    
    metric_values = []
    for index in df_today.index:
        values = []
        for i in range(1, days + 1):
            for x in [-2, -1, 0, 1, 2]:
                values.append(df.iloc[index - i * 24 * 4 + x][metric])
        metric_values.append(values)
    df_today['metric_values'] = metric_values
    df_today = df_today.reset_index()
    
    df_today['median'] = df_today['metric_values'].apply(np.median)
    df_today['q25'] = df_today['metric_values'].apply(lambda x: np.quantile(x, 0.25))
    df_today['q75'] = df_today['metric_values'].apply(lambda x: np.quantile(x, 0.75))
    df_today['iqr'] = df_today['q75'] - df_today['q25']
    df_today['low'] = df_today['q25'] - a * df_today['iqr']
    df_today['up'] = df_today['q75'] + a * df_today['iqr']
    df_today['low'] = df_today['low'].rolling(5, center = True, min_periods = 1).mean()
    df_today['up'] = df_today['up'].rolling(5, center = True, min_periods = 1).mean()
   
    if df_today[metric].iloc[-1] < df_today['low'].iloc[-1] or df_today[metric].iloc[-1] > df_today['up'].iloc[-1]:
        is_alert = True
    else:
        is_alert = False

    return is_alert, df_today


@dag(default_args=default_args, schedule_interval=schedule_interval, catchup=False)
def dag_nsmirnov_anomaly_alert():

    @task
    def run_alerts(chat=None):
        """
        –§—É–Ω–∫—Ü–∏—è run_alerts –¥–æ—Å—Ç–∞–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Ç–∏–∫—É –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ check_anomaly, 
        –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫ –≤ telegram.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        chat - chat_id telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        chat_id = chat or 926157354
        bot = telegram.Bot(token=os.environ.get("REPORT_BOT_TOKEN"))

        read_connection = {'host': 'https://clickhouse.lab.karpov.courses',
                          'database':'simulator_20230720',
                          'user':'student', 
                          'password':os.environ.get("PASSWORD")
                         }
    
    # –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ date, hm
        query = ''' SELECT 
                        ts
                        ,feedtbl.date
                        ,feedtbl.hm
                        ,users_feed
                        ,likes
                        ,views
                        ,users_msg
                        ,messages
                    FROM
                        (SELECT
                            toStartOfFifteenMinutes(time) as ts
                            ,toDate(ts) as date
                            ,formatDateTime(ts, '%R') as hm
                            ,uniqExact(user_id) as users_feed
                            ,countIf(user_id, action = 'like') as likes
                            ,countIf(user_id, action = 'view') as views
                        FROM {db}.feed_actions
                        WHERE ts >=  today() - 8 and ts < toStartOfFifteenMinutes(now())
                        GROUP BY ts, date, hm
                        ORDER BY ts) as feedtbl
                        FULL OUTER JOIN
                        (SELECT
                            toStartOfFifteenMinutes(time) as ts
                            ,toDate(ts) as date
                            ,formatDateTime(ts, '%R') as hm
                            ,uniqExact(user_id) as users_msg
                            ,count(user_id) as messages
                        FROM {db}.message_actions
                        WHERE ts >=  today() - 8 and ts < toStartOfFifteenMinutes(now())
                        GROUP BY ts, date, hm
                        ORDER BY ts) as msgtbl
                        USING ts '''
        data = ph.read_clickhouse(query, connection = read_connection)

        metrics_names = {'users_feed':'üë•Unique Feed Usersüë•',
                        'likes':'‚ù§Number of Likes‚ù§',
                        'views':'üëÄNumber of ViewsüëÄ',
                        'users_msg':'üë•Unique Messenger Usersüë•',
                        'messages':'‚úâNumber of Messages‚úâ'}

        metrics_names_for_titles = {'users_feed':'Unique Feed Users',
                                    'likes':'Number of Likes',
                                    'views':'Number of Views',
                                    'users_msg':'Unique Messenger Users',
                                    'messages':'Number of Messages'}

        dash_links = {'users_feed':'http://superset.lab.karpov.courses/r/4306',
                    'likes':'http://superset.lab.karpov.courses/r/4308',
                    'views':'http://superset.lab.karpov.courses/r/4309',
                    'users_msg':'http://superset.lab.karpov.courses/r/4310',
                    'messages':'http://superset.lab.karpov.courses/r/4311'}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫
        metrics = data.columns[3:]
        # –ó–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        a = 1.5
        days = 7 # –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ 4 –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –≤—ã—Å—ã–ª–∞–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–º–µ–Ω—è—Ç—å

        for metric in metrics:
            is_alert, df = check_anomaly(data, metric, a = a, days = days) # –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫—É –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º, –æ–ø–∏—Å–∞–Ω–Ω—ã–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ check_anomaly()
            if is_alert:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = '''–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–µ—Ç—Ä–∏–∫–æ–π {metric}:
    - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {current_value:,}
    - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è = {diff:.2%}
    - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è = {diff_prev:.2%}
    - –ì—Ä–∞—Ñ–∏–∫ –≤ Superset: {link}
    - –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: {dash}'''.format(metric = metrics_names[metric], 
                                        current_value = df[metric].iloc[-1], 
                                        diff = df[metric].iloc[-1] / df['median'].iloc[-1] - 1,
                                        diff_prev = df[metric].iloc[-1] / df[metric].iloc[-2] - 1,
                                        link = dash_links[metric],
                                        dash = 'http://superset.lab.karpov.courses/r/4312').replace(',', ' ')
            
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
                sns.set(style = 'whitegrid') # –∑–∞–¥–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞
                fig = plt.figure(figsize=(16, 10), dpi = 100) # –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
                plt.tight_layout()

                ax = sns.lineplot(x = df["hm"], y = df[metric], label = metric, color = 'red') # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
                ax = sns.lineplot(x = df["hm"], y = df['median'], label = 'expected_value', color = 'blue', linestyle='dashed') # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ (–º–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏)
                ax = sns.lineplot(x = df["hm"], y = df['low'], color = 'tab:blue', alpha = 0.1) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                ax = sns.lineplot(x = df["hm"], y = df['up'], color = 'tab:blue', alpha = 0.1) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                ax.fill_between(df["hm"], df['low'], df['up'], alpha=0.2) # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

                for ind, label in enumerate(ax.get_xticklabels()): # –≠—Ç–æ—Ç —Ü–∏–∫–ª –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã —Ä–∞–∑—Ä—è–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –æ—Å–∏ –•
                    if ind % 8 == 0:
                        label.set_visible(True)
                    else:
                        label.set_visible(False)

                ax.set(xlabel='time') 
                ax.set(ylabel=None)

                ax.set_title('''–ú–µ—Ç—Ä–∏–∫–∞ {metric}\n
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: a = {a}, days = {days}'''.format(metric = metrics_names_for_titles[metric], a = a, days = days), fontweight='bold') # –ó–∞–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
                ax.set(ylim=(0, None)) # –ó–∞–¥–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ—Å–∏ –£

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                plot_object = io.BytesIO()
                ax.figure.savefig(plot_object)
                plot_object.seek(0)
                plot_object.name = '{0}.png'.format(metrics_names_for_titles[metric])
                plt.close()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
                bot.sendMessage(chat_id=chat_id, text=msg)
                bot.sendPhoto(chat_id=chat_id, photo=plot_object)

        
        
    run_alerts()
    

dag_nsmirnov_anomaly_alert = dag_nsmirnov_anomaly_alert()